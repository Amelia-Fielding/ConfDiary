"use client";

import { useState } from "react";
import { useFhevm } from "@/fhevm/useFhevm";
import { useInMemoryStorage } from "@/hooks/useInMemoryStorage";
import { useMetaMaskEthersSigner } from "@/hooks/metamask/useMetaMaskEthersSigner";
import { useConfDiary } from "@/hooks/useConfDiary";
import { useDecryptedEntries } from "@/hooks/useDecryptedEntries";
import { Button } from "@/components/ui/Button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
import { WriteEntry } from "@/components/WriteEntry";
import { DiaryList } from "@/components/DiaryList";
import { DebugPanel } from "@/components/DebugPanel";
import { DiaryTest } from "@/components/DiaryTest";
import { AccountDebug } from "@/components/AccountDebug";
import { StorageDebug } from "@/components/StorageDebug";
import { FHEVMFeatures } from "@/components/FHEVMFeatures";

type PageView = "home" | "write" | "myDiary" | "publicTimeline";

export default function HomePage() {
  const [currentView, setCurrentView] = useState<PageView>("home");
  
  // Ëß£ÂØÜÁä∂ÊÄÅÁÆ°ÁêÜ
  const { addDecryptedEntry, getDecryptedEntry, isDecrypted } = useDecryptedEntries();
  const [decryptingEntries, setDecryptingEntries] = useState<Set<string>>(new Set());
  
  const { storage: fhevmDecryptionSignatureStorage } = useInMemoryStorage();
  const {
    provider,
    chainId,
    accounts,
    isConnected,
    connect,
    ethersSigner,
    ethersReadonlyProvider,
    sameChain,
    sameSigner,
    initialMockChains,
  } = useMetaMaskEthersSigner();

  // Initialize FHEVM instance
  const { 
    instance: fhevmInstance, 
    status: fhevmStatus, 
    error: fhevmError 
  } = useFhevm({
    provider,
    chainId,
    initialMockChains,
    enabled: true,
  });

  // Initialize ConfDiary business logic
  const confDiary = useConfDiary({
    instance: fhevmInstance,
    fhevmDecryptionSignatureStorage,
    eip1193Provider: provider,
    chainId,
    ethersSigner,
    ethersReadonlyProvider,
    sameChain,
    sameSigner,
  });

  // Â§ÑÁêÜÂÜôÊó•ËÆ∞ÂÆåÊàê
  const handleEntrySubmit = async (content: string, mood: number) => {
    await confDiary.createDiaryEntry(content, mood);
    setCurrentView("home"); // ÂàõÂª∫ÊàêÂäüÂêéËøîÂõûÈ¶ñÈ°µ
  };

  // Â§ÑÁêÜËß£ÂØÜ
  const handleDecrypt = async (entryId: string) => {
    if (!fhevmInstance || !ethersSigner || !confDiary.contractAddress) {
      alert("‚ùå Ëß£ÂØÜÊù°‰ª∂‰∏çÊª°Ë∂≥ÔºöËØ∑Á°Æ‰øùÈí±ÂåÖÂ∑≤ËøûÊé•‰∏îFHEVMÂÆû‰æãÂ∑≤Â∞±Áª™");
      return;
    }

    // Èò≤Ê≠¢ÈáçÂ§çËß£ÂØÜ
    if (decryptingEntries.has(entryId)) {
      alert("‚è≥ ËØ•Êù°ÁõÆÊ≠£Âú®Ëß£ÂØÜ‰∏≠ÔºåËØ∑Á®çÂÄô...");
      return;
    }

    if (isDecrypted(entryId)) {
      alert("‚úÖ ËØ•Êù°ÁõÆÂ∑≤ÁªèËß£ÂØÜËøá‰∫ÜÔºÅ");
      return;
    }

    // Á°ÆËÆ§Ëß£ÂØÜÊìç‰Ωú
    const confirmDecrypt = confirm(
      `üîê Á°ÆÂÆöË¶ÅËß£ÂØÜÊù°ÁõÆ #${entryId} ÂêóÔºü\n\n` +
      `ËøôÂ∞Ü‰ºöÔºö\n` +
      `1. Èìæ‰∏äËØ∑Ê±ÇËß£ÂØÜÊùÉÈôêÔºàÊ∂àËÄóGasÔºåÈúÄË¶ÅMetaMaskÁ≠æÂêçÔºâ\n` +
      `2. ÁîüÊàêFHEVMËß£ÂØÜÁ≠æÂêç\n` +
      `3. ‰ΩøÁî®FHEVMËß£ÂØÜÂä†ÂØÜÂÜÖÂÆπÔºà‰øùÊåÅÈöêÁßÅÔºâ\n` +
      `4. ÊòæÁ§∫Ëß£ÂØÜÂêéÁöÑÊó•ËÆ∞ÂÜÖÂÆπ\n\n` +
      `Ê≥®ÊÑèÔºöÁ¨¨‰∏ÄÊ≠•‰ºöÊ∂àËÄóGasË¥πÁî®Ôºå‰ΩÜËß£ÂØÜËøáÁ®ã‰øùÊåÅÈöêÁßÅ„ÄÇ`
    );

    if (!confirmDecrypt) {
      console.log("Áî®Êà∑ÂèñÊ∂à‰∫ÜËß£ÂØÜÊìç‰Ωú");
      return;
    }

    // Ê∑ªÂä†Âà∞Ëß£ÂØÜ‰∏≠ÁöÑÈõÜÂêà
    setDecryptingEntries(prev => new Set([...prev, entryId]));

    console.log("üîì ÂºÄÂßãËß£ÂØÜÊù°ÁõÆ:", entryId);

    try {
      // Ê≠•È™§1: Èìæ‰∏äËØ∑Ê±ÇËß£ÂØÜÊùÉÈôêÔºàÊ∂àËÄóGasÔºâ
      console.log("üí∞ Ê≠•È™§1: Èìæ‰∏äËØ∑Ê±ÇËß£ÂØÜÊùÉÈôêÔºàÊ∂àËÄóGasÔºâ...");
      const { ethers } = await import("ethers");
      const writeContract = new ethers.Contract(
        confDiary.contractAddress,
        confDiary.abi,
        ethersSigner  // ‰ΩøÁî®Á≠æÂêçËÄÖËøõË°åÂÜôÊìç‰Ωú
      );

      alert("üí∞ Âç≥Â∞ÜÂèëËµ∑Èìæ‰∏äËß£ÂØÜËØ∑Ê±Ç‰∫§ÊòìÔºåËøô‰ºöÊ∂àËÄóGasË¥πÁî®");

      // Ë∞ÉÁî®Èìæ‰∏äËß£ÂØÜËØ∑Ê±ÇÂáΩÊï∞
      const requestTx = await writeContract.requestDecryption(entryId);
      console.log("üì§ Ëß£ÂØÜËØ∑Ê±Ç‰∫§ÊòìÂ∑≤ÂèëÈÄÅ:", requestTx.hash);
      
      alert(`üì§ Ëß£ÂØÜËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅÔºÅ\n‰∫§ÊòìÂìàÂ∏å: ${requestTx.hash}\nÁ≠âÂæÖÂå∫ÂùóÁ°ÆËÆ§...`);

      // Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§
      const receipt = await requestTx.wait();
      console.log("‚úÖ Ëß£ÂØÜËØ∑Ê±Ç‰∫§ÊòìÂ∑≤Á°ÆËÆ§:", receipt);
      
      alert("‚úÖ Èìæ‰∏äËß£ÂØÜËØ∑Ê±ÇÂ∑≤Á°ÆËÆ§ÔºÅÁé∞Âú®ÂºÄÂßãFHEVMËß£ÂØÜ...");

      // Ê≠•È™§2: Ëé∑ÂèñÂä†ÂØÜÁöÑÊó•ËÆ∞Êù°ÁõÆ
      console.log("üìñ Ê≠•È™§2: ‰ªéÂêàÁ∫¶Ëé∑ÂèñÂä†ÂØÜÊù°ÁõÆ...");
      const readContract = new ethers.Contract(
        confDiary.contractAddress,
        confDiary.abi,
        ethersReadonlyProvider
      );

      const entry = await readContract.getDiaryEntry(entryId);
      console.log("‚úÖ Ëé∑ÂèñÂà∞Âä†ÂØÜÊù°ÁõÆ:", entry);

      // Ê≠•È™§3: ÂàõÂª∫FHEVMËß£ÂØÜÁ≠æÂêç
      console.log("üîë Ê≠•È™§3: ÂàõÂª∫FHEVMËß£ÂØÜÁ≠æÂêç...");
      const { FhevmDecryptionSignature } = await import("@/fhevm/FhevmDecryptionSignature");
      
      alert("üîë Áé∞Âú®ÈúÄË¶ÅÁîüÊàêFHEVMËß£ÂØÜÁ≠æÂêçÔºàEIP-712Á≠æÂêçÔºâ");
      
      const sig = await FhevmDecryptionSignature.loadOrSign(
        fhevmInstance,
        [confDiary.contractAddress],
        ethersSigner,
        fhevmDecryptionSignatureStorage
      );

      if (!sig) {
        alert("‚ùå FHEVMËß£ÂØÜÁ≠æÂêçÂàõÂª∫Â§±Ë¥•");
        return;
      }

      console.log("‚úÖ FHEVMËß£ÂØÜÁ≠æÂêçÂ∞±Áª™");
      alert("‚úÖ FHEVMÁ≠æÂêçÊàêÂäüÔºÅÂºÄÂßãÊâßË°åÂêåÊÄÅËß£ÂØÜ...");

      // Ê≠•È™§4: FHEVMËß£ÂØÜÔºà‰øùÊåÅÈöêÁßÅÔºâ
      console.log("üîê Ê≠•È™§4: ‰ΩøÁî®MockFhevmInstanceËøõË°åÂêåÊÄÅËß£ÂØÜ...");
      const res = await fhevmInstance.userDecrypt(
        [
          { handle: entry.encryptedContentHash, contractAddress: confDiary.contractAddress },
          { handle: entry.encryptedAuthorHash, contractAddress: confDiary.contractAddress },
          { handle: entry.encryptedMood, contractAddress: confDiary.contractAddress } // üéØ Ëß£ÂØÜÂøÉÊÉÖÂÄº
        ],
        sig.privateKey,
        sig.publicKey,
        sig.signature,
        sig.contractAddresses,
        sig.userAddress,
        sig.startTimestamp,
        sig.durationDays
      );

      console.log("‚úÖ FHEVMÂêåÊÄÅËß£ÂØÜÂÆåÊàê:", res);

      const contentHash = res[entry.encryptedContentHash];
      const authorHash = res[entry.encryptedAuthorHash];
      const moodValue = res[entry.encryptedMood]; // üéØ Ëß£ÂØÜÁöÑÂøÉÊÉÖÂÄº

      console.log("üìÑ Ëß£ÂØÜÁöÑÂÜÖÂÆπÂìàÂ∏å:", contentHash);
      console.log("üë§ Ëß£ÂØÜÁöÑ‰ΩúËÄÖÂìàÂ∏å:", authorHash);
      console.log("üòä Ëß£ÂØÜÁöÑÂøÉÊÉÖÂÄº:", moodValue); // üéØ ÂøÉÊÉÖÂÄºÊó•Âøó

      // Ê≠•È™§5: Ëé∑ÂèñÂéüÂßãÂÜÖÂÆπ
      console.log("üìÇ Ê≠•È™§5: Ëé∑ÂèñÂéüÂßãÂÜÖÂÆπ...");
      const localContent = localStorage.getItem(`diary_content_${entryId}`);
      
      // Ê≠•È™§6: ‰øùÂ≠òËß£ÂØÜÁªìÊûú
      addDecryptedEntry(entryId, {
        contentHash: contentHash.toString(),
        authorHash: authorHash.toString(),
        moodValue: moodValue.toString(), // üéØ ‰øùÂ≠òÂøÉÊÉÖÂÄº
        localContent: localContent || undefined
      });

      console.log("üíæ Ëß£ÂØÜÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞Áä∂ÊÄÅ!");
      
      // Ê≠•È™§6: ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
      alert(
        `üéâ Ëß£ÂØÜÊàêÂäüÔºÅ\n\n` +
        `Êù°ÁõÆ #${entryId} Â∑≤Ëß£ÂØÜ\n` +
        `ÂÜÖÂÆπ: ${localContent ? localContent.substring(0, 50) + (localContent.length > 50 ? '...' : '') : 'ÂìàÂ∏å: ' + contentHash.toString().substring(0, 20) + '...'}\n\n` +
        `Ëß£ÂØÜÂêéÁöÑÂÜÖÂÆπÁé∞Âú®‰ºöÊòæÁ§∫Âú®ÁïåÈù¢‰∏ä„ÄÇ`
      );
      
      // Âº∫Âà∂Âà∑Êñ∞UI
      setTimeout(() => {
        confDiary.loadUserEntries();
      }, 100);

    } catch (error: any) {
      console.error("‚ùå Ëß£ÂØÜÂ§±Ë¥•:", error);
      alert(`‚ùå Ëß£ÂØÜÂ§±Ë¥•: ${error.message}`);
    } finally {
      // ‰ªéËß£ÂØÜ‰∏≠ÁöÑÈõÜÂêàÁßªÈô§
      setDecryptingEntries(prev => {
        const newSet = new Set(prev);
        newSet.delete(entryId);
        return newSet;
      });
    }
  };

  if (!isConnected) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              ConfDiary
            </CardTitle>
            <p className="text-gray-600 mt-2">
              Anonymous encrypted diary powered by FHEVM
            </p>
          </CardHeader>
          <CardContent className="text-center">
            <Button 
              onClick={connect} 
              size="lg"
              className="w-full"
            >
              Connect Wallet
            </Button>
            <p className="text-sm text-gray-500 mt-4">
              Connect your MetaMask wallet to get started
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (confDiary.isDeployed === false) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="text-xl text-red-600">Contract Not Found</CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <p className="text-gray-600 mb-4">
              ConfDiary contract is not deployed on chain {chainId}
            </p>
            <p className="text-sm text-gray-500">
              Please make sure you're connected to the correct network and the contract is deployed.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <button 
                onClick={() => setCurrentView("home")}
                className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent hover:opacity-80 transition-opacity"
              >
                ConfDiary
              </button>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                {accounts?.[0]?.slice(0, 6)}...{accounts?.[0]?.slice(-4)}
              </span>
              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Debug current view - ÂºÄÂèëÊó∂ÂèØ‰ª•ÂèñÊ∂àÊ≥®Èáä */}
        {process.env.NODE_ENV === 'development' && false && (
          <div className="mb-4 p-2 bg-yellow-100 text-xs">
            ÂΩìÂâçËßÜÂõæ: {currentView} | ÂΩìÂâçË¥¶Êà∑: {accounts?.[0]?.slice(0, 10)}... | Áî®Êà∑Êù°ÁõÆ: {confDiary.userEntries?.length || 0}
          </div>
        )}

        {currentView === "home" && (
          <HomeView 
            fhevmStatus={fhevmStatus}
            fhevmError={fhevmError}
            chainId={chainId}
            confDiary={confDiary}
            fhevmInstance={fhevmInstance}
            ethersSigner={ethersSigner}
            ethersReadonlyProvider={ethersReadonlyProvider}
            onNavigate={setCurrentView}
          />
        )}

        {currentView === "write" && (
          <WriteEntry
            onSubmit={handleEntrySubmit}
            onCancel={() => setCurrentView("home")}
            isCreating={confDiary.isCreating}
          />
        )}

        {currentView === "myDiary" && (
          <div>
            {/* MyDiary Ë∞ÉËØï‰ø°ÊÅØ - ÂºÄÂèëÊó∂ÂèØ‰ª•ÂèñÊ∂àÊ≥®Èáä */}
            {process.env.NODE_ENV === 'development' && false && (
              <div className="mb-4 p-2 bg-blue-100 text-xs">
                MyDiary ÁªÑ‰ª∂Â∑≤Âä†ËΩΩ | Áî®Êà∑Êù°ÁõÆ: {JSON.stringify(confDiary.userEntries)} | isLoading: {confDiary.isLoading.toString()}
              </div>
            )}
            <DiaryList
              entries={confDiary.userEntries}
              title="My Diary Entries"
              isLoading={confDiary.isLoading}
              showDecryptButton={true}
              onDecrypt={handleDecrypt}
              onRefresh={confDiary.loadUserEntries}
              getDecryptedEntry={getDecryptedEntry}
              isDecrypted={isDecrypted}
              decryptingEntries={decryptingEntries}
              onBack={() => setCurrentView("home")}
            />
          </div>
        )}

        {currentView === "publicTimeline" && (
          <DiaryList
            entries={confDiary.recentEntries}
            title="Public Timeline"
            isLoading={confDiary.isLoading}
            showDecryptButton={false}
            onBack={() => setCurrentView("home")}
          />
        )}

        {/* Áä∂ÊÄÅÊ∂àÊÅØ */}
        {confDiary.message && (
          <div className="fixed bottom-4 right-4 max-w-sm">
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="p-4">
                <p className="text-sm text-blue-800">{confDiary.message}</p>
              </CardContent>
            </Card>
          </div>
        )}
      </main>
    </div>
  );
}

// È¶ñÈ°µËßÜÂõæÁªÑ‰ª∂
interface HomeViewProps {
  fhevmStatus: string;
  fhevmError: Error | undefined;
  chainId: number | undefined;
  confDiary: any;
  fhevmInstance: any;
  ethersSigner: any;
  ethersReadonlyProvider: any;
  onNavigate: (view: PageView) => void;
}

const HomeView: React.FC<HomeViewProps> = ({
  fhevmStatus,
  fhevmError,
  chainId,
  confDiary,
  fhevmInstance,
  ethersSigner,
  ethersReadonlyProvider,
  onNavigate
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      {/* Status Panel */}
      <div className="md:col-span-1">
        <Card>
          <CardHeader>
            <CardTitle>Connection Status</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex justify-between">
              <span className="text-gray-600">Chain ID:</span>
              <span className="font-mono">{chainId || 'Unknown'}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">FHEVM Status:</span>
              <span className={`font-medium ${
                fhevmStatus === 'ready' ? 'text-green-600' : 
                fhevmStatus === 'error' ? 'text-red-600' : 
                'text-yellow-600'
              }`}>
                {fhevmStatus}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Contract:</span>
              <span className="font-medium text-green-600">
                {confDiary.contractAddress ? 'Deployed' : 'Not Found'}
              </span>
            </div>
            {fhevmError && (
              <div className="text-sm text-red-600 bg-red-50 p-3 rounded-lg">
                {fhevmError.message}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Main Content Area */}
      <div className="md:col-span-2">
        <Card>
          <CardHeader>
            <CardTitle>Welcome to ConfDiary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-white text-2xl">üîí</span>
              </div>
              <h3 className="text-lg font-semibold mb-2">Your Anonymous Diary</h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                Write your thoughts privately with end-to-end encryption. 
                Only you can decrypt and read your entries.
              </p>
              
              <div className="space-y-3">
                <Button 
                  size="lg" 
                  className="w-full max-w-xs"
                  onClick={() => {
                    console.log("Button clicked! Navigating to write page...");
                    onNavigate("write");
                  }}
                  disabled={false}
                >
                  Write New Entry
                </Button>
                <Button 
                  variant="outline" 
                  size="lg" 
                  className="w-full max-w-xs"
                  onClick={() => onNavigate("myDiary")}
                  disabled={fhevmStatus !== 'ready' || !confDiary.contractAddress}
                >
                  View My Diary ({confDiary.userEntries.length})
                </Button>
                <Button 
                  variant="ghost" 
                  size="lg" 
                  className="w-full max-w-xs"
                  onClick={() => onNavigate("publicTimeline")}
                  disabled={fhevmStatus !== 'ready' || !confDiary.contractAddress}
                >
                  Public Timeline ({confDiary.recentEntries.length})
                </Button>
                
                {/* Debug info */}
                <div className="text-xs text-gray-500 mt-4 space-y-1">
                  <div>FHEVM Status: {fhevmStatus}</div>
                  <div>Contract: {confDiary.contractAddress || 'Not found'}</div>
                  <div>Can Create: {confDiary.canCreateEntry ? 'Yes' : 'No'}</div>
                  <div>Instance: {confDiary.instance ? 'Ready' : 'Not ready'}</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Ë∞ÉËØïÈù¢Êùø - ÂºÄÂèëÊó∂ÂèØ‰ª•ÂèñÊ∂àÊ≥®Èáä */}
        {process.env.NODE_ENV === 'development' && false && (
          <>
            {/* FHEVM ÊµãËØïÈù¢Êùø */}
            <DiaryTest
              confDiary={confDiary}
              fhevmInstance={fhevmInstance}
              ethersSigner={ethersSigner}
            />

            {/* Ë¥¶Êà∑Ë∞ÉËØïÈù¢Êùø */}
            <AccountDebug
              confDiary={confDiary}
              ethersSigner={ethersSigner}
              ethersReadonlyProvider={ethersReadonlyProvider}
            />

            {/* Â≠òÂÇ®Ë∞ÉËØïÈù¢Êùø */}
            <StorageDebug />

            {/* FHEVM ÂêåÊÄÅËøêÁÆóÂäüËÉΩ */}
            <FHEVMFeatures
              confDiary={confDiary}
              fhevmInstance={fhevmInstance}
              ethersSigner={ethersSigner}
              ethersReadonlyProvider={ethersReadonlyProvider}
              currentUserAddress={ethersSigner?.address || ""}
            />
          </>
        )}
      </div>
    </div>
  );
};
