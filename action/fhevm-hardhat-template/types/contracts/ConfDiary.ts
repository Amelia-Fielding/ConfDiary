/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ConfDiary {
  export type DiaryEntryStruct = {
    encryptedContentHash: BytesLike;
    encryptedAuthorHash: BytesLike;
    encryptedMood: BytesLike;
    timestamp: BigNumberish;
    isDeleted: boolean;
    entryId: BigNumberish;
  };

  export type DiaryEntryStructOutput = [
    encryptedContentHash: string,
    encryptedAuthorHash: string,
    encryptedMood: string,
    timestamp: bigint,
    isDeleted: boolean,
    entryId: bigint
  ] & {
    encryptedContentHash: string;
    encryptedAuthorHash: string;
    encryptedMood: string;
    timestamp: bigint;
    isDeleted: boolean;
    entryId: bigint;
  };
}

export interface ConfDiaryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amIHappierThan"
      | "compareMoodSum"
      | "createDiaryEntry"
      | "deleteDiaryEntry"
      | "diaryEntries"
      | "entryExists"
      | "entryLikes"
      | "getDiaryEntry"
      | "getEntryLikes"
      | "getGlobalMoodStats"
      | "getRecentEntries"
      | "getTotalEntries"
      | "getUserEntries"
      | "getUserMoodStats"
      | "getUserMoodSum"
      | "globalMoodCount"
      | "globalMoodSum"
      | "hasUserLikedEntry"
      | "likeEntry"
      | "protocolId"
      | "requestDecryption"
      | "totalEntries"
      | "userEntries"
      | "userHappinessRank"
      | "userLikedEntry"
      | "userMoodCount"
      | "userMoodSum"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionRequested"
      | "DiaryEntryCreated"
      | "DiaryEntryDeleted"
      | "EntryLiked"
      | "HappinessRankUpdated"
      | "MoodUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "amIHappierThan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compareMoodSum",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDiaryEntry",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteDiaryEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diaryEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiaryEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalMoodStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEntries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEntries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMoodStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMoodSum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalMoodCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalMoodSum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserLikedEntry",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likeEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEntries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userEntries",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHappinessRank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLikedEntry",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMoodCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMoodSum",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "amIHappierThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareMoodSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDiaryEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteDiaryEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diaryEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entryExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryLikes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDiaryEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryLikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalMoodStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMoodStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMoodSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalMoodCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalMoodSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserLikedEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likeEntry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHappinessRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLikedEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMoodCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMoodSum",
    data: BytesLike
  ): Result;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [
    entryId: BigNumberish,
    requester: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    entryId: bigint,
    requester: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    entryId: bigint;
    requester: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiaryEntryCreatedEvent {
  export type InputTuple = [
    entryId: BigNumberish,
    author: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    entryId: bigint,
    author: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    entryId: bigint;
    author: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiaryEntryDeletedEvent {
  export type InputTuple = [entryId: BigNumberish, author: AddressLike];
  export type OutputTuple = [entryId: bigint, author: string];
  export interface OutputObject {
    entryId: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntryLikedEvent {
  export type InputTuple = [entryId: BigNumberish, liker: AddressLike];
  export type OutputTuple = [entryId: bigint, liker: string];
  export interface OutputObject {
    entryId: bigint;
    liker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HappinessRankUpdatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoodUpdatedEvent {
  export type InputTuple = [entryId: BigNumberish, author: AddressLike];
  export type OutputTuple = [entryId: bigint, author: string];
  export interface OutputObject {
    entryId: bigint;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfDiary extends BaseContract {
  connect(runner?: ContractRunner | null): ConfDiary;
  waitForDeployment(): Promise<this>;

  interface: ConfDiaryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amIHappierThan: TypedContractMethod<
    [otherUser: AddressLike],
    [string],
    "nonpayable"
  >;

  compareMoodSum: TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [string],
    "nonpayable"
  >;

  createDiaryEntry: TypedContractMethod<
    [
      encryptedContentHash: BytesLike,
      encryptedAuthorHash: BytesLike,
      encryptedMood: BytesLike,
      contentProof: BytesLike,
      authorProof: BytesLike,
      moodProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  deleteDiaryEntry: TypedContractMethod<
    [entryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  diaryEntries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        encryptedContentHash: string;
        encryptedAuthorHash: string;
        encryptedMood: string;
        timestamp: bigint;
        isDeleted: boolean;
        entryId: bigint;
      }
    ],
    "view"
  >;

  entryExists: TypedContractMethod<[entryId: BigNumberish], [boolean], "view">;

  entryLikes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDiaryEntry: TypedContractMethod<
    [entryId: BigNumberish],
    [ConfDiary.DiaryEntryStructOutput],
    "view"
  >;

  getEntryLikes: TypedContractMethod<[entryId: BigNumberish], [string], "view">;

  getGlobalMoodStats: TypedContractMethod<
    [],
    [[string, string] & { moodSum: string; moodCount: string }],
    "view"
  >;

  getRecentEntries: TypedContractMethod<
    [limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalEntries: TypedContractMethod<[], [bigint], "view">;

  getUserEntries: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserMoodStats: TypedContractMethod<
    [user: AddressLike],
    [[string, string] & { moodSum: string; moodCount: string }],
    "view"
  >;

  getUserMoodSum: TypedContractMethod<[user: AddressLike], [string], "view">;

  globalMoodCount: TypedContractMethod<[], [string], "view">;

  globalMoodSum: TypedContractMethod<[], [string], "view">;

  hasUserLikedEntry: TypedContractMethod<
    [entryId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;

  likeEntry: TypedContractMethod<[entryId: BigNumberish], [void], "nonpayable">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestDecryption: TypedContractMethod<
    [entryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalEntries: TypedContractMethod<[], [bigint], "view">;

  userEntries: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userHappinessRank: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userLikedEntry: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  userMoodCount: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  userMoodSum: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amIHappierThan"
  ): TypedContractMethod<[otherUser: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "compareMoodSum"
  ): TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDiaryEntry"
  ): TypedContractMethod<
    [
      encryptedContentHash: BytesLike,
      encryptedAuthorHash: BytesLike,
      encryptedMood: BytesLike,
      contentProof: BytesLike,
      authorProof: BytesLike,
      moodProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteDiaryEntry"
  ): TypedContractMethod<[entryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diaryEntries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        encryptedContentHash: string;
        encryptedAuthorHash: string;
        encryptedMood: string;
        timestamp: bigint;
        isDeleted: boolean;
        entryId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "entryExists"
  ): TypedContractMethod<[entryId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "entryLikes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDiaryEntry"
  ): TypedContractMethod<
    [entryId: BigNumberish],
    [ConfDiary.DiaryEntryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEntryLikes"
  ): TypedContractMethod<[entryId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGlobalMoodStats"
  ): TypedContractMethod<
    [],
    [[string, string] & { moodSum: string; moodCount: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentEntries"
  ): TypedContractMethod<[limit: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalEntries"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserEntries"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserMoodStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [[string, string] & { moodSum: string; moodCount: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMoodSum"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "globalMoodCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalMoodSum"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasUserLikedEntry"
  ): TypedContractMethod<
    [entryId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "likeEntry"
  ): TypedContractMethod<[entryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestDecryption"
  ): TypedContractMethod<[entryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalEntries"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userEntries"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userHappinessRank"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userLikedEntry"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "userMoodCount"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "userMoodSum"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "DiaryEntryCreated"
  ): TypedContractEvent<
    DiaryEntryCreatedEvent.InputTuple,
    DiaryEntryCreatedEvent.OutputTuple,
    DiaryEntryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DiaryEntryDeleted"
  ): TypedContractEvent<
    DiaryEntryDeletedEvent.InputTuple,
    DiaryEntryDeletedEvent.OutputTuple,
    DiaryEntryDeletedEvent.OutputObject
  >;
  getEvent(
    key: "EntryLiked"
  ): TypedContractEvent<
    EntryLikedEvent.InputTuple,
    EntryLikedEvent.OutputTuple,
    EntryLikedEvent.OutputObject
  >;
  getEvent(
    key: "HappinessRankUpdated"
  ): TypedContractEvent<
    HappinessRankUpdatedEvent.InputTuple,
    HappinessRankUpdatedEvent.OutputTuple,
    HappinessRankUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MoodUpdated"
  ): TypedContractEvent<
    MoodUpdatedEvent.InputTuple,
    MoodUpdatedEvent.OutputTuple,
    MoodUpdatedEvent.OutputObject
  >;

  filters: {
    "DecryptionRequested(uint256,address,uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "DiaryEntryCreated(uint256,address,uint256)": TypedContractEvent<
      DiaryEntryCreatedEvent.InputTuple,
      DiaryEntryCreatedEvent.OutputTuple,
      DiaryEntryCreatedEvent.OutputObject
    >;
    DiaryEntryCreated: TypedContractEvent<
      DiaryEntryCreatedEvent.InputTuple,
      DiaryEntryCreatedEvent.OutputTuple,
      DiaryEntryCreatedEvent.OutputObject
    >;

    "DiaryEntryDeleted(uint256,address)": TypedContractEvent<
      DiaryEntryDeletedEvent.InputTuple,
      DiaryEntryDeletedEvent.OutputTuple,
      DiaryEntryDeletedEvent.OutputObject
    >;
    DiaryEntryDeleted: TypedContractEvent<
      DiaryEntryDeletedEvent.InputTuple,
      DiaryEntryDeletedEvent.OutputTuple,
      DiaryEntryDeletedEvent.OutputObject
    >;

    "EntryLiked(uint256,address)": TypedContractEvent<
      EntryLikedEvent.InputTuple,
      EntryLikedEvent.OutputTuple,
      EntryLikedEvent.OutputObject
    >;
    EntryLiked: TypedContractEvent<
      EntryLikedEvent.InputTuple,
      EntryLikedEvent.OutputTuple,
      EntryLikedEvent.OutputObject
    >;

    "HappinessRankUpdated(address)": TypedContractEvent<
      HappinessRankUpdatedEvent.InputTuple,
      HappinessRankUpdatedEvent.OutputTuple,
      HappinessRankUpdatedEvent.OutputObject
    >;
    HappinessRankUpdated: TypedContractEvent<
      HappinessRankUpdatedEvent.InputTuple,
      HappinessRankUpdatedEvent.OutputTuple,
      HappinessRankUpdatedEvent.OutputObject
    >;

    "MoodUpdated(uint256,address)": TypedContractEvent<
      MoodUpdatedEvent.InputTuple,
      MoodUpdatedEvent.OutputTuple,
      MoodUpdatedEvent.OutputObject
    >;
    MoodUpdated: TypedContractEvent<
      MoodUpdatedEvent.InputTuple,
      MoodUpdatedEvent.OutputTuple,
      MoodUpdatedEvent.OutputObject
    >;
  };
}
